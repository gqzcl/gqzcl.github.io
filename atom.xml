<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>gqzcl&#39;Blog</title>
  
  <subtitle>Welcome</subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="%5Bobject%20Object%5D" rel="hub"/>
  <link href="http://molingu.top/"/>
  <updated>2018-10-27T15:06:25.502Z</updated>
  <id>http://molingu.top/</id>
  
  <author>
    <name>gqzcl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>区间最值_线段树</title>
    <link href="http://molingu.top//posts/c99feae6/"/>
    <id>http://molingu.top//posts/c99feae6/</id>
    <published>2018-10-27T09:23:54.000Z</published>
    <updated>2018-10-27T15:06:25.502Z</updated>
    
    <content type="html"><![CDATA[<h3 id="&#x539F;&#x9898;&#x94FE;&#x63A5;&#xFF1A;Click-here"><a href="#&#x539F;&#x9898;&#x94FE;&#x63A5;&#xFF1A;Click-here" class="headerlink" title="&#x539F;&#x9898;&#x94FE;&#x63A5;&#xFF1A;Click here"></a>&#x539F;&#x9898;&#x94FE;&#x63A5;&#xFF1A;<a href="http://poj.org/problem?id=3264" target="_blank" rel="noopener">Click here</a></h3><h2 id="&#x524D;&#x8A00;"><a href="#&#x524D;&#x8A00;" class="headerlink" title="&#x524D;&#x8A00;"></a>&#x524D;&#x8A00;</h2><pre><code>&#x524D;&#x51E0;&#x5929;&#x4E0A;&#x8BFE;&#x521A;&#x521A;&#x5B66;&#x4E86;&#x7EBF;&#x6BB5;&#x6811;&#xFF0C;&#x8BFE;&#x4E0A;&#x5E03;&#x7F6E;&#x4E86;&#x8FD9;&#x4E2A;&#x9898;&#x76EE;&#x3002;&#x8BF4;&#x5B9E;&#x8BDD;&#xFF0C;&#x521A;&#x770B;&#x5230;&#x8FD9;&#x4E2A;&#x9898;&#x76EE;&#x7684;&#x65F6;&#x5019;&#x6211;&#x7684;&#x7B2C;&#x4E00;&#x53CD;&#x5E94;&#x5C31;&#x662F;&#x6570;&#x7EC4;&#x904D;&#x5386;&#xFF0C;&#x7136;&#x540E;&#x628A;&#x6700;&#x5927;&#x503C;&#x6700;&#x5C0F;&#x503C;&#x5B58;&#x50A8;&#x8D77;&#x6765;&#x3002;&#x4E0D;&#x8FC7;&#x9898;&#x76EE;&#x80AF;&#x5B9A;&#x6CA1;&#x8FD9;&#x4E48;&#x7B80;&#x5355;&#xFF0C;&#x800C;&#x4E14;&#x6700;&#x5173;&#x952E;&#x7684;&#x662F;&#x6700;&#x4E0A;&#x9762;&#x6E05;&#x6E05;&#x695A;&#x695A;&#x7684;&#x5199;&#x7740;&#x7EBF;&#x6BB5;&#x6811;&#xFF0C;&#x90A3;&#x4E48;&#x597D;&#x5427;&#xFF0C;&#x90A3;&#x5C31;&#x7EBF;&#x6BB5;&#x6811;&#x3002;&#x7EBF;&#x6BB5;&#x6811;&#x4E4B;&#x524D;&#x5012;&#x4E5F;&#x662F;&#x542C;&#x8BF4;&#x8FC7;&#xFF0C;&#x4F46;&#x662F;&#x6CA1;&#x6709;&#x53BB;&#x4ED4;&#x7EC6;&#x7684;&#x4E86;&#x89E3;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x770B;&#x5230;&#x65F6;&#x662F;&#x4E00;&#x8138;&#x61F5;&#x903C;&#xFF0C;&#x6CA1;&#x6709;&#x529E;&#x6CD5;&#xFF0C;&#x4E0D;&#x4F1A;&#x4E5F;&#x4E0D;&#x53EF;&#x80FD;&#x81EA;&#x5DF1;&#x95ED;&#x95E8;&#x9020;&#x8F6E;&#x5B50;&#x7684;&#x5427;&#xFF0C;&#x4E8E;&#x662F;&#x6211;&#x5C31;&#x4E0A;&#x7F51;&#x67E5;&#x4E86;&#x4E00;&#x4E0B;&#xFF0C;&#x53D1;&#x73B0;&#x7EBF;&#x6BB5;&#x6811;&#x4E3B;&#x8981;&#x5C31;&#x662F;&#x6C42;&#x533A;&#x95F4;&#x7684;&#x548C;&#x6216;&#x8005;&#x6700;&#x503C;&#x95EE;&#x9898;&#x7684;&#xFF0C;&#x7EBF;&#x6BB5;&#x6811;&#x7684;&#x539F;&#x7406;&#x5C31;&#x662F;&#x5C06;[1,n]&#x5206;&#x89E3;&#x6210;&#x82E5;&#x5E72;&#x7279;&#x5B9A;&#x7684;&#x5B50;&#x533A;&#x95F4;(&#x6570;&#x91CF;&#x4E0D;&#x8D85;&#x8FC7;4*n),&#x7136;&#x540E;&#x5C06;&#x6BCF;&#x4E2A;&#x533A;&#x95F4;[L,R]&#x5206;&#x89E3;&#x8F83;&#x5C11;&#x5B50;&#x533A;&#x95F4;&#xFF0C;&#x901A;&#x8FC7;&#x5BF9;&#x5B50;&#x533A;&#x95F4;&#x7684;&#x4FEE;&#x6539;&#x548C;&#x7EDF;&#x8BA1;&#xFF0C;&#x6765;&#x5B9E;&#x73B0;&#x5FEB;&#x901F;&#x5BF9;[L,R]&#x7684;&#x4FEE;&#x6539;&#x6216;&#x8005;&#x7EDF;&#x8BA1;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x90FD;&#x662F;O(log2(n))&#x3002;</code></pre><h2 id="&#x5E94;&#x7528;"><a href="#&#x5E94;&#x7528;" class="headerlink" title="&#x5E94;&#x7528;"></a>&#x5E94;&#x7528;</h2><pre><code>&#x7528;&#x7EBF;&#x6BB5;&#x6811;&#x7EDF;&#x8BA1;&#x7684;&#x4E1C;&#x897F;&#x5FC5;&#x987B;&#x7B26;&#x5408;&#x533A;&#x95F4;&#x52A0;&#x6CD5;&#xFF1A;</code></pre><ol><li>&#x6570;&#x5B57;&#x4E4B;&#x548C;&#x2014;&#x2014;&#x603B;&#x6570;&#x5B57;&#x4E4B;&#x548C; = &#x5DE6;&#x533A;&#x95F4;&#x6570;&#x5B57;&#x4E4B;&#x548C; + &#x53F3;&#x533A;&#x95F4;&#x6570;&#x5B57;&#x4E4B;&#x548C;</li><li>&#x6700;&#x5927;&#x516C;&#x56E0;&#x6570;(GCD)&#x2014;&#x2014;&#x603B;GCD = gcd( &#x5DE6;&#x533A;&#x95F4;GCD , &#x53F3;&#x533A;&#x95F4;GCD );</li><li>&#x6700;&#x5927;&#x503C;&#x2014;&#x2014;&#x603B;&#x6700;&#x5927;&#x503C;=max(&#x5DE6;&#x533A;&#x95F4;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x53F3;&#x533A;&#x95F4;&#x6700;&#x5927;&#x503C;)</li></ol><h2 id="&#x4EE3;&#x7801;&#x5B9E;&#x73B0;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x73B0;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x73B0;"></a>&#x4EE3;&#x7801;&#x5B9E;&#x73B0;</h2><pre><code>&#x7531;&#x4E8E;&#x5728;&#x7F51;&#x4E0A;&#x770B;&#x5230;&#x9898;&#x76EE;&#x5927;&#x591A;&#x90FD;&#x662F;&#x8FD9;&#x4E00;&#x9898;&#xFF0C;&#xFF0C;&#xFF0C;&#x4E8E;&#x662F;&#x6709;&#x4E9B;&#x5148;&#x5165;&#x4E3A;&#x4E3B;&#x5566;&#xFF0C;&#x4E0D;&#x8FC7;&#x8FD8;&#x662F;&#x81EA;&#x5DF1;&#x5199;&#x4E86;&#x4E00;&#x904D;&#xFF0C;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;</code></pre><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 10000000+5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nMax,nMin;<span class="comment">//&#x6700;&#x5927;&#xFF0C;&#x6700;&#x5C0F;&#x503C; </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="keyword">int</span> l,r;<span class="comment">//&#x5DE6;&#xFF0C;&#x53F3;&#x7AEF;&#x70B9; </span></span><br><span class="line">    <span class="keyword">int</span> nMin,nMax;<span class="comment">//&#x5B58;&#x50A8;&#x5404;&#x4E2A;&#x533A;&#x95F4;&#x7684;&#x6700;&#x5927;&#x503C;&#x548C;&#x6700;&#x5C0F;&#x503C;</span></span><br><span class="line">}segTree[MAXN*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> <span class="comment">//&#x7ED3;&#x70B9;i&#x4E0A;&#x7684;&#x4E3A;&#x533A;&#x95F4;(l,r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    segTree[i].l=l;</span><br><span class="line">    segTree[i].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)  <span class="comment">//&#x5230;&#x8FBE;&#x53F6;&#x5B50;&#x7ED3;&#x70B9; </span></span><br><span class="line">    {</span><br><span class="line">        segTree[i].nMin=segTree[i].nMax=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    } </span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    Build(<span class="number">2</span>*i,l,mid);  <span class="comment">//&#x5230;&#x8FBE;&#x53F6;&#x8282;&#x70B9;&#x65F6;&#x65E0;&#x987B;&#x6C42;&#x6700;&#x503C;</span></span><br><span class="line">    Build(<span class="number">2</span>*i|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    segTree[i].nMin=min(segTree[<span class="number">2</span>*i].nMin,segTree[<span class="number">2</span>*i+<span class="number">1</span>].nMin);<span class="comment">//&#x672A;&#x5230;&#x8FBE;&#x53F6;&#x8282;&#x70B9;&#x65F6;&#xFF0C;&#x53D6;&#x5404;&#x4E2A;&#x533A;&#x95F4;&#x7684;&#x6700;&#x503C;</span></span><br><span class="line">    segTree[i].nMax=max(segTree[<span class="number">2</span>*i].nMax,segTree[<span class="number">2</span>*i+<span class="number">1</span>].nMax);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Search</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span><span class="comment">//&#x67E5;&#x8BE2;&#x7ED3;&#x70B9;i&#x4E0A;l-r&#x7684;&#x6700;&#x5927;&#x503C;&#x548C;&#x6700;&#x5C0F;&#x503C;</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(segTree[i].nMax&lt;=nMax&amp;&amp;segTree[i].nMin&gt;=nMin)  <span class="comment">//&#x65E0;&#x987B;&#x66F4;&#x65B0;</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(segTree[i].l==l&amp;&amp;segTree[i].r==r) <span class="comment">//&#x521A;&#x597D;&#x7B26;&#x5408;</span></span><br><span class="line">    {</span><br><span class="line">        nMax=max(segTree[i].nMax,nMax);</span><br><span class="line">        nMin=min(segTree[i].nMin,nMin);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mid=(segTree[i].l+segTree[i].r)/<span class="number">2</span>;<span class="comment">//&#x7EE7;&#x7EED;&#x5411;&#x4E0B;&#x5BFB;&#x627E;</span></span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid)   </span><br><span class="line">        Search(i*<span class="number">2</span>,l,r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid)  </span><br><span class="line">        Search(i*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        Search(i*<span class="number">2</span>,l,mid);</span><br><span class="line">        Search(i*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    }      </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> m,n; <span class="comment">//m&#x5934;&#x725B;&#xFF0C;&#x5206;n&#x7EC4;</span></span><br><span class="line">    <span class="keyword">int</span> l,r; </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        Build(<span class="number">1</span>,<span class="number">1</span>,m); <span class="comment">//&#x5EFA;&#x6811;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r; <span class="comment">//&#x8F93;&#x5165;&#x8981;&#x67E5;&#x8BE2;&#x7684;&#x533A;&#x95F4;&#x8303;&#x56F4;</span></span><br><span class="line">            nMax=-INF;nMin=INF; <span class="comment">//&#x521D;&#x59CB;&#x5316;&#x6700;&#x5927;&#x503C;&#x6700;&#x5C0F;&#x503C;</span></span><br><span class="line">            Search(<span class="number">1</span>,l,r); </span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;nMax-nMin&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">        }    </span><br><span class="line">    }   </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x540E;&#x7EED;"><a href="#&#x540E;&#x7EED;" class="headerlink" title="&#x540E;&#x7EED;"></a>&#x540E;&#x7EED;</h2><pre><code>&#x672A;&#x5B8C;&#x7ED3;&#x3002;&#x3002;&#x3002;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;&amp;#x539F;&amp;#x9898;&amp;#x94FE;&amp;#x63A5;&amp;#xFF1A;Click-here&quot;&gt;&lt;a href=&quot;#&amp;#x539F;&amp;#x9898;&amp;#x94FE;&amp;#x63A5;&amp;#xFF1A;Click-here&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="ACM" scheme="http://molingu.top/tags/ACM/"/>
    
  </entry>
  
</feed>
