[{"title":"test5","date":"2018-10-27T15:45:32.000Z","path":"/posts/8ddf18fb/","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[]},{"title":"test4","date":"2018-10-27T15:45:28.000Z","path":"/posts/fad8286d/","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[]},{"title":"test3","date":"2018-10-27T15:45:25.000Z","path":"/posts/64bcbdce/","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[]},{"title":"test2","date":"2018-10-27T15:45:21.000Z","path":"/posts/13bb8d58/","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[]},{"title":"test1","date":"2018-10-27T15:45:13.000Z","path":"/posts/8ab2dce2/","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[]},{"title":"区间最值_线段树","date":"2018-10-27T09:23:54.000Z","path":"/posts/c99feae6/","text":"&#x539F;&#x9898;&#x94FE;&#x63A5;&#xFF1A;Click here&#x524D;&#x8A00;&#x524D;&#x51E0;&#x5929;&#x4E0A;&#x8BFE;&#x521A;&#x521A;&#x5B66;&#x4E86;&#x7EBF;&#x6BB5;&#x6811;&#xFF0C;&#x8BFE;&#x4E0A;&#x5E03;&#x7F6E;&#x4E86;&#x8FD9;&#x4E2A;&#x9898;&#x76EE;&#x3002;&#x8BF4;&#x5B9E;&#x8BDD;&#xFF0C;&#x521A;&#x770B;&#x5230;&#x8FD9;&#x4E2A;&#x9898;&#x76EE;&#x7684;&#x65F6;&#x5019;&#x6211;&#x7684;&#x7B2C;&#x4E00;&#x53CD;&#x5E94;&#x5C31;&#x662F;&#x6570;&#x7EC4;&#x904D;&#x5386;&#xFF0C;&#x7136;&#x540E;&#x628A;&#x6700;&#x5927;&#x503C;&#x6700;&#x5C0F;&#x503C;&#x5B58;&#x50A8;&#x8D77;&#x6765;&#x3002;&#x4E0D;&#x8FC7;&#x9898;&#x76EE;&#x80AF;&#x5B9A;&#x6CA1;&#x8FD9;&#x4E48;&#x7B80;&#x5355;&#xFF0C;&#x800C;&#x4E14;&#x6700;&#x5173;&#x952E;&#x7684;&#x662F;&#x6700;&#x4E0A;&#x9762;&#x6E05;&#x6E05;&#x695A;&#x695A;&#x7684;&#x5199;&#x7740;&#x7EBF;&#x6BB5;&#x6811;&#xFF0C;&#x90A3;&#x4E48;&#x597D;&#x5427;&#xFF0C;&#x90A3;&#x5C31;&#x7EBF;&#x6BB5;&#x6811;&#x3002;&#x7EBF;&#x6BB5;&#x6811;&#x4E4B;&#x524D;&#x5012;&#x4E5F;&#x662F;&#x542C;&#x8BF4;&#x8FC7;&#xFF0C;&#x4F46;&#x662F;&#x6CA1;&#x6709;&#x53BB;&#x4ED4;&#x7EC6;&#x7684;&#x4E86;&#x89E3;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x770B;&#x5230;&#x65F6;&#x662F;&#x4E00;&#x8138;&#x61F5;&#x903C;&#xFF0C;&#x6CA1;&#x6709;&#x529E;&#x6CD5;&#xFF0C;&#x4E0D;&#x4F1A;&#x4E5F;&#x4E0D;&#x53EF;&#x80FD;&#x81EA;&#x5DF1;&#x95ED;&#x95E8;&#x9020;&#x8F6E;&#x5B50;&#x7684;&#x5427;&#xFF0C;&#x4E8E;&#x662F;&#x6211;&#x5C31;&#x4E0A;&#x7F51;&#x67E5;&#x4E86;&#x4E00;&#x4E0B;&#xFF0C;&#x53D1;&#x73B0;&#x7EBF;&#x6BB5;&#x6811;&#x4E3B;&#x8981;&#x5C31;&#x662F;&#x6C42;&#x533A;&#x95F4;&#x7684;&#x548C;&#x6216;&#x8005;&#x6700;&#x503C;&#x95EE;&#x9898;&#x7684;&#xFF0C;&#x7EBF;&#x6BB5;&#x6811;&#x7684;&#x539F;&#x7406;&#x5C31;&#x662F;&#x5C06;[1,n]&#x5206;&#x89E3;&#x6210;&#x82E5;&#x5E72;&#x7279;&#x5B9A;&#x7684;&#x5B50;&#x533A;&#x95F4;(&#x6570;&#x91CF;&#x4E0D;&#x8D85;&#x8FC7;4*n),&#x7136;&#x540E;&#x5C06;&#x6BCF;&#x4E2A;&#x533A;&#x95F4;[L,R]&#x5206;&#x89E3;&#x8F83;&#x5C11;&#x5B50;&#x533A;&#x95F4;&#xFF0C;&#x901A;&#x8FC7;&#x5BF9;&#x5B50;&#x533A;&#x95F4;&#x7684;&#x4FEE;&#x6539;&#x548C;&#x7EDF;&#x8BA1;&#xFF0C;&#x6765;&#x5B9E;&#x73B0;&#x5FEB;&#x901F;&#x5BF9;[L,R]&#x7684;&#x4FEE;&#x6539;&#x6216;&#x8005;&#x7EDF;&#x8BA1;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x90FD;&#x662F;O(log2(n))&#x3002; &#x5E94;&#x7528;&#x7528;&#x7EBF;&#x6BB5;&#x6811;&#x7EDF;&#x8BA1;&#x7684;&#x4E1C;&#x897F;&#x5FC5;&#x987B;&#x7B26;&#x5408;&#x533A;&#x95F4;&#x52A0;&#x6CD5;&#xFF1A; &#x6570;&#x5B57;&#x4E4B;&#x548C;&#x2014;&#x2014;&#x603B;&#x6570;&#x5B57;&#x4E4B;&#x548C; = &#x5DE6;&#x533A;&#x95F4;&#x6570;&#x5B57;&#x4E4B;&#x548C; + &#x53F3;&#x533A;&#x95F4;&#x6570;&#x5B57;&#x4E4B;&#x548C; &#x6700;&#x5927;&#x516C;&#x56E0;&#x6570;(GCD)&#x2014;&#x2014;&#x603B;GCD = gcd( &#x5DE6;&#x533A;&#x95F4;GCD , &#x53F3;&#x533A;&#x95F4;GCD ); &#x6700;&#x5927;&#x503C;&#x2014;&#x2014;&#x603B;&#x6700;&#x5927;&#x503C;=max(&#x5DE6;&#x533A;&#x95F4;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x53F3;&#x533A;&#x95F4;&#x6700;&#x5927;&#x503C;) &#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#x7531;&#x4E8E;&#x5728;&#x7F51;&#x4E0A;&#x770B;&#x5230;&#x9898;&#x76EE;&#x5927;&#x591A;&#x90FD;&#x662F;&#x8FD9;&#x4E00;&#x9898;&#xFF0C;&#xFF0C;&#xFF0C; &#x4E8E;&#x662F;&#x6709;&#x4E9B;&#x5148;&#x5165;&#x4E3A;&#x4E3B;&#x5566;&#xFF0C;&#x4E0D;&#x8FC7;&#x8FD8;&#x662F;&#x81EA;&#x5DF1;&#x5199;&#x4E86;&#x4E00;&#x904D;&#xFF0C;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;#define MAXN 200000#define INF 10000000+5int nMax,nMin;//&#x6700;&#x5927;&#xFF0C;&#x6700;&#x5C0F;&#x503C; struct Node{ int l,r;//&#x5DE6;&#xFF0C;&#x53F3;&#x7AEF;&#x70B9; int nMin,nMax;//&#x5B58;&#x50A8;&#x5404;&#x4E2A;&#x533A;&#x95F4;&#x7684;&#x6700;&#x5927;&#x503C;&#x548C;&#x6700;&#x5C0F;&#x503C;}segTree[MAXN*4];int a[MAXN];void Build(int i,int l,int r) //&#x7ED3;&#x70B9;i&#x4E0A;&#x7684;&#x4E3A;&#x533A;&#x95F4;(l,r){ segTree[i].l=l; segTree[i].r=r; if(l==r) //&#x5230;&#x8FBE;&#x53F6;&#x5B50;&#x7ED3;&#x70B9; { segTree[i].nMin=segTree[i].nMax=a[l]; return; } int mid=(l+r)/2; Build(2*i,l,mid); //&#x5230;&#x8FBE;&#x53F6;&#x8282;&#x70B9;&#x65F6;&#x65E0;&#x987B;&#x6C42;&#x6700;&#x503C; Build(2*i|1,mid+1,r); segTree[i].nMin=min(segTree[2*i].nMin,segTree[2*i+1].nMin);//&#x672A;&#x5230;&#x8FBE;&#x53F6;&#x8282;&#x70B9;&#x65F6;&#xFF0C;&#x53D6;&#x5404;&#x4E2A;&#x533A;&#x95F4;&#x7684;&#x6700;&#x503C; segTree[i].nMax=max(segTree[2*i].nMax,segTree[2*i+1].nMax);}void Search(int i,int l,int r)//&#x67E5;&#x8BE2;&#x7ED3;&#x70B9;i&#x4E0A;l-r&#x7684;&#x6700;&#x5927;&#x503C;&#x548C;&#x6700;&#x5C0F;&#x503C;{ if(segTree[i].nMax&lt;=nMax&amp;&amp;segTree[i].nMin&gt;=nMin) //&#x65E0;&#x987B;&#x66F4;&#x65B0; return; if(segTree[i].l==l&amp;&amp;segTree[i].r==r) //&#x521A;&#x597D;&#x7B26;&#x5408; { nMax=max(segTree[i].nMax,nMax); nMin=min(segTree[i].nMin,nMin); return; } int mid=(segTree[i].l+segTree[i].r)/2;//&#x7EE7;&#x7EED;&#x5411;&#x4E0B;&#x5BFB;&#x627E; if(r&lt;=mid) Search(i*2,l,r); else if(l&gt;mid) Search(i*2+1,l,r); else { Search(i*2,l,mid); Search(i*2+1,mid+1,r); } }int main(){ int m,n; //m&#x5934;&#x725B;&#xFF0C;&#x5206;n&#x7EC4; int l,r; while(cin&gt;&gt;m&gt;&gt;n) { for(int i=1;i&lt;=m;i++) cin&gt;&gt;a[i]; Build(1,1,m); //&#x5EFA;&#x6811; for(int i=1;i&lt;=n;i++) { cin&gt;&gt;l&gt;&gt;r; //&#x8F93;&#x5165;&#x8981;&#x67E5;&#x8BE2;&#x7684;&#x533A;&#x95F4;&#x8303;&#x56F4; nMax=-INF;nMin=INF; //&#x521D;&#x59CB;&#x5316;&#x6700;&#x5927;&#x503C;&#x6700;&#x5C0F;&#x503C; Search(1,l,r); cout&lt;&lt;nMax-nMin&lt;&lt;endl; } } } &#x540E;&#x7EED;&#x672A;&#x5B8C;&#x7ED3;&#x3002;&#x3002;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"ACM","slug":"ACM","permalink":"http://molingu.top/tags/ACM/"}]}]